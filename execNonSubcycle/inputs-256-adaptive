# Timestepping 
main.maxTime = 10  # maximum (scaled) time to run to
main.max_step = 99999   # maximum number of steps to run
main.minStep = 1 #sometimes we want to make sure we don't stop immediately
main.cfl = 0.9  # "cfl" number
main.initial_cfl = 0.1  # "cfl" number 0.1
main.max_dt_grow_factor = 1.1 #max amount dt can grow from one timestep to another - 1.1
main.max_dt = 0.5
main.fixed_dt = -1 # 0.0002 # 
main.convergence_criteria = 1e-3

# Grid setup
main.max_level = 1 # finest level allowed in simulation

# Change these!
main.num_cells = 1024 256 16
main.tagging_val = 0.01  	#0.08*(32/height)
main.plot_interval = 800
main.tags_grow = 8             # amount to buffer tags. 4 * (height/128) in order to capture entire chimney
main.plot_prefix = uniform-256pts-adaptive
main.output_folder = ./
main.max_box_size = 128      	# largest box length allowed
main.inputGhost = 0
main.thetaFile = theta-256.dat

main.domain_size = 4 1 0 
#main.restart_file = output/bm2-adaptive-Ra100-chk-64pts4676.2d.hdf5 #should be a checkpoint file
#main.gridsFile=../../test/grids/grids-katz-data-112-40

#Refinement
main.ref_ratio = 2 2 2 2 2 2  # refinement ratios
main.regrid_interval = -1  # number of timesteps between regridding
main.blockFactor = 4           # block factor used in grid generation
main.fill_ratio = 0.8          # how efficient are the grids
main.nestingRadius = 1         # proper nesting radius required


# Note - to find the index of each field look in the amrMushyLayer.H. theta = 5, U=0
#main.tagging_vector_var = 0     # Refine if this vector field is above the refinement threshold. Only use if tagging_scalar_var = -1.
main.tagging_scalar_var = 8    # Refine if the undivided gradient of this scalar field is above the refinement threshold.
# 5 = temperature, 8 = porosity, 31 - permeability

# Output

main.check_interval = -1
main.check_prefix = chk-uniform-256pts-adaptive
main.iteration_plot_interval=-1
main.verbosity = 5 #1 - not much, 5 - a fair bit, 15 - loads

main.printAnalyticSoln = false

##################################################
# How to calculate permeability
# 0: permeability = 1
# 1: permeability = (1-solid fraction)^3
# 2: permeability = kozeny-carman
# 3: permeability = log()
# 4: permeability = x^2 (or whatever function I want)
################################################
parameters.permeabilityFunction = 3
parameters.heleShaw=false

#################################################
# frame advection method
#0 - godunov
#1 - finite differences
#################################################
main.frameAdvectionMethod = 1

################################################
# Which order to calculate various parts of the 
# fluid velocity
# fluidVelDiffOrder - 2/4, for divergence and gradient calculations
# fluidVelInterpOrder - 0/1/2, for converting cell centred to face centred values
################################################
main.fluidVelDiffOrder = 2
main.fluidVelInterpOrder = 1 # 1st order seems to work better than 2nd order for smooth errors
main.ownVelCalc = true #false means level, true means composite

########################################################
# Problem to solve
# This code is designed to be able to solve both the full 
# problem and also the benchmarks, with the relevant sections
# turned on or off as required.
# 0 - full problem
# 1 - benchmark 1, directional solidification without flow
# 2 - benchmark 2, convection in a fixed porous medium (Horton-Rogers-Lapwood problem)
# 3 - diffusion d(theta)/dt = laplacian(theta)
# 4 - pure advection
# 5 - enforced porosity field 
#######################################################
parameters.problem_type = 2
main.enforceAnalyticSoln=false 

############################################
# How accurate do we want out advancement in time?
# 1 - backward euler (1st order)
# 2 - tga (2nd order)
############################################
main.timeIntegrationOrder = 1

############################################
# Multigrid solver
###########################################
amrmultigrid.num_smooth  = 80
amrmultigrid.tolerance   = 1.0e-15
amrmultigrid.num_mg      = 1
amrmultigrid.norm_thresh = 1.0e-15
amrmultigrid.hang_eps    = 1.0e-15
amrmultigrid.max_iter    = 50
amrmultigrid.verbosity   = 1

############################################
# Picard iterator for non-linear solve
###########################################
picardIterator.absTolerance = 1e-4
picardIterator.relTolerance = 1e5
picardIterator.initialIters = 999
picardIterator.predictorLimit = 0.5
picardIterator.iterationLimit = 200

#############################################
# Boundary and initial conditions
# Warning - CoarseAverageFace doesn't like periodic BCs (see note in Copier::define())
############################################
main.is_periodic = 0 0 0    # 1 if domain is periodic 
# (note that periodic BC's override physical BC types)
# physical BC types:  0 = homogeneous Dirichlet
#                     1 = homogeneous Neumann
main.lo_bc = 0 0 0  
main.hi_bc = 0 0 0  

parameters.fixedTempDirection = 1  # 0 for sidewall heating, 1 for vertical heating


bc.enthalpy_side_val = 0     #d/dx = 0
bc.composition_side_val = 0  #d/dx = 0
bc.conc_liquid_side_val = 0  #d/dx = 0
bc.temp_side_val = 0  		 #d/dx = 0
bc.porosity_side_val = 0	#d/dx=0

bc.conc_liquid_hot = 1 #just for testing performance of BC application
bc.conc_liquid_cold = 0 #just for testing performance of BC application


#############################################
#Physical parameters
#############################################
##Katz & Worster 2008 parameters for NH4Cl
parameters.viscosity 				= 1.4e-3 	# Pa s
parameters.heatConductivityLiquid   = 0.54 		# W/(m K)
parameters.heatConductivitySolid    = 2.2 		# W/(m K)
parameters.specificHeatLiquid 		= 3.5e3 	# J/(kg K)
parameters.specificHeatSolid 		= 1.5e3 	# J/(kg K)
parameters.liquidDensity			= 1050		# kg/(m^3)
parameters.latentHeatDissolution	= 2.76e5	# J/kg
parameters.thermalExpansivity		= 2.1e-4	# 1/K
parameters.solutalExpansivity		= -0.30		# 1/(wt. frac.)
parameters.eutecticTemp				= -16		# celcius
parameters.eutecticComposition		= 0.2		# wt. frac.
parameters.liquidusSlope			= 471.4 	# celcius/(wt. frac.)
parameters.waterDistributionCoeff	= 1e-5 #1e-5		# dimensionless
parameters.heleShawCoolingCoeff		= 1600		# J/(m^3 s celcius)
parameters.liquidSoluteDiffusivity	= 1e-9		# m^2/s   (guess, approx 100x smaller than heat diffusivity)
parameters.d						= 5e-3		# m
parameters.height					= 0.5		# m
parameters.width					= 6e-2		# m
parameters.referencePermeability 	= 1e-12		# m^2
parameters.gravitationalAcceleration= 9.8		# m/s
parameters.V						= 1e-6		# m/s

#Initial and boundary conditions
parameters.initialComposition		= 0.25		# wt. frac. 
parameters.bottomTemp 				= -28.0		# celcius
parameters.topTemp					= 20.0		# celcius

##If we wish, we can enforce other parameters like the Stefan number or Lewis number. Else, they are calculated from the data above

##For solidification without fluid flow benchmark (See Katz & Worster 2008 and Worster 1991):
#parameters.stefan 			= 5.7 #5.7
parameters.compositionRatio = 1.4
parameters.K				= 1
parameters.specificHeatRatio= 1
#parameters.lewis			= 10e200  # (infinite)
#parameters.V				= 1e-6 #1e-6
parameters.deltaTemp		= 35
parameters.bottomTemp			= -20  
parameters.topTemp			= 15  #15
parameters.eutecticTemp		= -20
parameters.height 			= 0.5
parameters.initialComposition	= 0.7
parameters.eutecticComposition	= 0.2 
parameters.liquidusSlope	= 50
parameters.heatConductivityLiquid   = 0.5 		# W/(m K)
parameters.specificHeatLiquid 		= 3.5e3 	# J/(kg K)
parameters.liquidDensity			= 1000		# kg/(m^3)
parameters.heatConductivityRatio = 1
parameters.heleShawCoolingCoeff = 0 #we don't consider a hele-shaw setup yet


#For fixed porous medium flow
parameters.rayleighTemp 		= 40
parameters.rayleighComposition 	= 0
parameters.stefan 				= 0 # 0 means H = theta
parameters.K					= 1
parameters.lewis 				= 10e200
parameters.V					= 0
parameters.topTemp 			= 0
parameters.bottomTemp 		= 10
parameters.eutecticTemp = 0
parameters.deltaTemp = 10
parameters.initialComposition	= 0.7
parameters.eutecticComposition	= 0.9
parameters.liquidusSlope	= 50
parameters.specificHeatLiquid 		= 3.5e3 	# J/(kg K)
parameters.specificHeatSolid		= 3.5e3 	# J/(kg K)




## Options only used for debugging
debugging.fixVelocity = false  # setting to true means we just use the initial velocity
debugging.resetTemperatureField = false  # setting to true means that, when loading from a restart file, we overwrite the temperature field with initial conditions
