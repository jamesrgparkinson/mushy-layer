C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"



C     -----------------------------------------------------------------
C     subroutine NONLINEARSMOOTHING{1D,2D,3D}
C     computes alpha * aCoef(i) * I - (beta * Div (bCoef(i) * Grad))
C     computes alpha * aCoef(i) * phi - (beta * Div (bCoef(i) * Grad)) phi_l
C     applied to phi and then does jacobi relaxation
C
C     INPUTS/OUTPUTS:
C     phi       <=> phi
C     phi_l	 => phi_l = f(phi)
C     rhs        => right hand side
C     region     => box to compute over
C     dx         => cell spacing
C     alpha      => contant multiplier of aCoef
C     aCoef      => spatially varying coef of I
C     beta       => contant multiplier of bCoef
C     bCoef[012] => face-centered coefs of Grad
C     lambda     => relaxation coefficient
C     redBlack   => red or black pass
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     ------------------------------------------------------------------
#if CH_SPACEDIM == 1
      subroutine NONLINEARSMOOTHING1D(
     &     CHF_FRA[phi],
     &     CHF_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[lambda],
     &     CHF_CONST_INT[redBlack],
     &     CHF_CONST_INT[whichComponent])
#elif CH_SPACEDIM == 2
      subroutine NONLINEARSMOOTHING2D(
     &     CHF_FRA[phi],
     &     CHF_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_CONST_FRA[lambda],
     &     CHF_CONST_INT[redBlack],
     &     CHF_CONST_INT[whichComponent])
#elif CH_SPACEDIM == 3
      subroutine NONLINEARSMOOTHING3D(
     &     CHF_FRA[phi],
     &     CHF_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_CONST_FRA[bCoef2],
     &     CHF_CONST_FRA[lambda],
     &     CHF_CONST_INT[redBlack],
     &     CHF_CONST_INT[whichComponent])
#else
      Somthing_that_will_not_compile
#endif

      REAL_T dxinv,lofphi,phi_alternate,H_s,H_e,H_l,new_var,
     &       phi_l0, phi_l1, phi_l2, phi_l3, phi_l4, phi_l5, phi_l6
      integer n,ncomp,indtot,imin,imax,nstart,nfinish
      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]

      if (ncomp .ne. CHF_NCOMP[phi]) then
         call MAYDAYERROR()
      endif

      if (ncomp .ne. CHF_NCOMP[rhs]) then
         call MAYDAYERROR()
      endif

      CHF_DTERM[
      if (ncomp .ne. CHF_NCOMP[bCoef0]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef1]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef2]) then
         call MAYDAYERROR()
      endif                                  ]

      dxinv = one/(dx*dx)
      
      if (whichComponent > -1) then
C        just do this component
         nstart = whichComponent
         nfinish = nstart
      else
C        do all components
         nstart = 0
         nfinish = ncomp-1
      endif

C      do n = 0, ncomp - 1
      do n = nstart, nfinish
#if CH_SPACEDIM==3
        do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
          do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            indtot = CHF_DTERM[imin; + j ; + k]

C     add 0 or 1 to imin, so that imin+j+k has same parity as redBlack
C     petermc, 26 april 2001
C          Jamie Parkinson - just do jacobi for now

            imin = imin + abs(mod(indtot + redBlack, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2
            
C            do i = imin, imax, 1


            phi_l0 = phi_l(CHF_IX[i;j;k],n)
            phi_l1 = phi_l(CHF_IX[i+1;j;k],n)
            phi_l2 = phi_l(CHF_IX[i-1;j;k],n)
            phi_l3 = phi_l(CHF_IX[i;j+1;k],n)
            phi_l4 = phi_l(CHF_IX[i;j-1;k],n)
            phi_l5 = phi_l(CHF_IX[i;j;k+1],n)
            phi_l6 = phi_l(CHF_IX[i;j;k-1],n)



              lofphi =
     &            alpha * aCoef(CHF_IX[i;j;k],n) * phi(CHF_IX[i;j;k],n)
     &          - beta  *
     &             (CHF_DTERM[
     &               bCoef0(CHF_IX[i+1;j  ;k  ],n)
     &               * (phi_l1-phi_l0)
     &
     &             - bCoef0(CHF_IX[i  ;j  ;k  ],n)
     &               * (phi_l0-phi_l2) ;
     &
     &             + bCoef1(CHF_IX[i  ;j+1;k  ],n)
     &               * (phi_l3-phi_l0)
     &
     &             - bCoef1(CHF_IX[i  ;j  ;k  ],n)
     &               * (phi_l0-phi_l4) ;
     &
     &             + bCoef2(CHF_IX[i  ;j  ;k+1],n)
     &               * (phi_l5-phi_l0)
     &
     &             - bCoef2(CHF_IX[i  ;j  ;k  ],n)
     &               * (phi_l0-phi_l6) ]
     &             ) * dxinv

              phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n)
     &          - lambda(CHF_IX[i;j;k],n) * (lofphi - rhs(CHF_IX[i;j;k],n))
     
     
C            Can also update phi_l here for use in future calculations. Will need liquidus and solidus for this though.
C             phi_l(CHF_IX[i;j;k],n) = COMPUTEDIFFUSEDVAR(phi(CHF_IX[i;j;k],0), phi(CHF_IX[i;j;k],1),  n)

             
              
            enddo
#if CH_SPACEDIM > 1
          enddo
#endif
#if CH_SPACEDIM==3
        enddo
#endif
      enddo

      return
      end


C     -----------------------------------------------------------------
C     subroutine NLVCCOMPUTEOP{1D,2D,3D}
C     computes (alpha * aCoef(i) * I - (beta * Div (bCoef(i) * Grad)))(phi)
C
C     INPUTS/OUTPUTS:
C     lofphi    <=  operator applied to phi
C     phi        => phi
C     phi_l      => phi_l = f(phi, H)
C     alpha      => contant multiplier of aCoef
C     aCoef      => spatially varying coef of I
C     beta       => contant multiplier of bCoef
C     bCoef[012] => face-centered coefs of Grad
C     region     => box to compute over
C     dx         => cell spacing
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     ------------------------------------------------------------------
#if CH_SPACEDIM == 1
      subroutine NLVCCOMPUTEOP1D(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 2
      subroutine NLVCCOMPUTEOP2D(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 3
      subroutine NLVCCOMPUTEOP3D(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_CONST_FRA[bCoef2],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#else
      Somthing_that_will_not_compile
#endif

      REAL_T dxinv
      integer n,ncomp

      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[lofphi]) then
         call MAYDAYERROR()
      endif

      CHF_DTERM[
      if (ncomp .ne. CHF_NCOMP[bCoef0]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef1]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef2]) then
         call MAYDAYERROR()
      endif                                  ]

      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          lofphi(CHF_IX[i;j;k],n) =
     &        alpha * aCoef(CHF_IX[i;j;k],n) * phi(CHF_IX[i;j;k],n)
     &      - beta  *
     &         (CHF_DTERM[
     &           bCoef0(CHF_IX[i+1;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i+1;j  ;k  ],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef0(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i-1;j  ;k  ],n)) ;
     &
     &         + bCoef1(CHF_IX[i  ;j+1;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j+1;k  ],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef1(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i  ;j-1;k  ],n)) ;
     &
     &         + bCoef2(CHF_IX[i  ;j  ;k+1],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k+1],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef2(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i  ;j  ;k-1],n)) ]
     &         ) * dxinv
        CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine NLVCCOMPUTERES{1D,2D,3D}
C     computes:
C         rhs - (alpha * aCoef(i) * I)(phi) - ((beta * Div (bCoef(i) * Grad)))(phi_l)
C
C     INPUTS/OUTPUTS:
C     res       <=  residual
C     phi        => phi
C     phi_l      => phi_l = f(phi, H)
C     rhs        => rhs
C     alpha      => contant multiplier of aCoef
C     aCoef      => spatially varying coef of I
C     beta       => contant multiplier of bCoef
C     bCoef[012] => face-centered coefs of Grad
C     region     => box to compute over
C     dx         => cell spacing
C
C     Warning: phi, rhs, res must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     ------------------------------------------------------------------
#if CH_SPACEDIM == 1
      subroutine NLVCCOMPUTERES1D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 2
      subroutine NLVCCOMPUTERES2D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 3
      subroutine NLVCCOMPUTERES3D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_CONST_FRA[bCoef2],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#else
      Somthing_that_will_not_compile
#endif

      REAL_T dxinv
      integer n,ncomp

      integer CHF_DDECL[i;j;k]

      ncomp = CHF_NCOMP[phi]
      if (ncomp .ne. CHF_NCOMP[res]) then
         call MAYDAYERROR()
      endif

      CHF_DTERM[
      if (ncomp .ne. CHF_NCOMP[bCoef0]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef1]) then
         call MAYDAYERROR()
      endif                                  ;

      if (ncomp .ne. CHF_NCOMP[bCoef2]) then
         call MAYDAYERROR()
      endif                                  ]

      dxinv = one/(dx*dx)
      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          res(CHF_IX[i;j;k],n) =
     &        rhs(CHF_IX[i;j;k],n)
     &      - (alpha * aCoef(CHF_IX[i;j;k],n) * phi(CHF_IX[i;j;k],n)
     &       - beta  *
     &          (CHF_DTERM[
     &            bCoef0(CHF_IX[i+1;j  ;k  ],n)
     &            * (phi_l(CHF_IX[i+1;j  ;k  ],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &          - bCoef0(CHF_IX[i  ;j  ;k  ],n)
     &            * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i-1;j  ;k  ],n)) ;
     &
     &          + bCoef1(CHF_IX[i  ;j+1;k  ],n)
     &            * (phi_l(CHF_IX[i  ;j+1;k  ],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &          - bCoef1(CHF_IX[i  ;j  ;k  ],n)
     &            * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i  ;j-1;k  ],n)) ;
     &
     &          + bCoef2(CHF_IX[i  ;j  ;k+1],n)
     &            * (phi_l(CHF_IX[i  ;j  ;k+1],n) - phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &          - bCoef2(CHF_IX[i  ;j  ;k  ],n)
     &            * (phi_l(CHF_IX[i  ;j  ;k  ],n) - phi_l(CHF_IX[i  ;j  ;k-1],n)) ]
     &          ) * dxinv
     &        )
        CHF_ENDDO
      enddo

      return
      end

C     -----------------------------------------------------------------
C     subroutine RESTRICTRESNLVC{1D,2D,3D}
C     computes restriction of residual to a coarser multgrid level
C        res[2h] = I[h->2h] (rhs[h] - L(phi[h]))
C     INPUTS/OUTPUTS:
C     res       <=  res[2h]
C     rhs       =>  rhs[h]
C     phi       =>  phi[h]
C     phi_l     =>  phi_l[h] = f(phi, H)
C     alpha      => contant multiplier of aCoef
C     aCoef      => spatially varying coef of I
C     beta       => contant multiplier of bCoef
C     bCoef[012] => face-centered coefs of Grad
C     region    =>  Box over which rhs is defined (in h index space)
C     dx        =>  grid spacing in h
C     ------------------------------------------------------------------
#if CH_SPACEDIM == 1
      subroutine RESTRICTRESNLVC1D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 2
      subroutine RESTRICTRESNLVC2D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#elif CH_SPACEDIM == 3
      subroutine RESTRICTRESNLVC3D(
     &     CHF_FRA[res],
     &     CHF_CONST_FRA[phi],
     &     CHF_CONST_FRA[phi_l],
     &     CHF_CONST_FRA[rhs],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_FRA[aCoef],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_FRA[bCoef0],
     &     CHF_CONST_FRA[bCoef1],
     &     CHF_CONST_FRA[bCoef2],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])
#else
      Somthing_that_will_not_compile
#endif

      REAL_T denom,dxinv,lofphi
      integer n,ncomp

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      ncomp = CHF_NCOMP[phi]

      dxinv = one / (dx*dx)
      denom = D_TERM(2, *2, *2)

      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = i/2 ;
          jj = j/2 ;
          kk = k/2 ]

          lofphi =
     &        alpha * aCoef(CHF_IX[i;j;k],n) * phi(CHF_IX[i;j;k],n)
     &      - beta  *
     &         (CHF_DTERM[
     &           bCoef0(CHF_IX[i+1;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i+1;j  ;k  ],n)-phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef0(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n)-phi_l(CHF_IX[i-1;j  ;k  ],n)) ;
     &
     &         + bCoef1(CHF_IX[i  ;j+1;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j+1;k  ],n)-phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef1(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n)-phi_l(CHF_IX[i  ;j-1;k  ],n)) ;
     &
     &         + bCoef2(CHF_IX[i  ;j  ;k+1],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k+1],n)-phi_l(CHF_IX[i  ;j  ;k  ],n))
     &
     &         - bCoef2(CHF_IX[i  ;j  ;k  ],n)
     &           * (phi_l(CHF_IX[i  ;j  ;k  ],n)-phi_l(CHF_IX[i  ;j  ;k-1],n)) ]
     &         ) * dxinv

          res(CHF_IX[ii;jj;kk],n) = res(CHF_IX[ii;jj;kk],n)
     &                            + (rhs(CHF_IX[i;j;k],n) - lofphi) / denom
        CHF_ENDDO
      enddo

      return
      end
      
C     -----------------------------------------------------------------
C     subroutine RESTRICT
C     computes restriction of some field to a coarser multgrid level
C        phiCoarse[2h] = I[h->2h] (phi[h])
C     INPUTS/OUTPUTS:
C     phiCoarse       <=  phiCoarse[2h]
C     phiFine       =>  phiFine[h]
C     region    =>  Box over which rhs is defined (in h index space)
C     dx        =>  grid spacing in h
C     ------------------------------------------------------------------

      subroutine RESTRICT(
     &     CHF_FRA[phiCoarse],
     &     CHF_CONST_FRA[phiFine],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx])


      REAL_T denom,dxinv,lofphi
      integer n,ncomp

      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]

      ncomp = CHF_NCOMP[phiFine]

      denom = D_TERM(2, *2, *2)

      do n = 0, ncomp-1
        CHF_MULTIDO[region; i; j; k]
          CHF_DTERM[
          ii = i/2 ;
          jj = j/2 ;
          kk = k/2 ]

          phiCoarse(CHF_IX[ii;jj;kk],n) = phiCoarse(CHF_IX[ii;jj;kk],n)
     &                            + (phiFine(CHF_IX[i;j;k],n)) / denom
        CHF_ENDDO
      enddo

      return
      end

C -------------------------------------------------------------
C  utility function -- increments lhs with average from  faces
C  to cell-centers of bCoefs in dir direction
C
C  lhs   <=> cell-centered data to be incremented
C  beta   => multiplier of rhs
C  bCoefs => face-centered data to be averaged to cell-centers
C  box    => cell-centered box over which to operate
C  dir    => direction to do averaging
C  scale  => scaling factor
C --------------------------------------------------------------
      subroutine SUMFACESNLVC(CHF_FRA[lhs],
     &                    CHF_CONST_REAL[beta],
     &                    CHF_CONST_FRA[bCoefs],
     &                    CHF_BOX[box],
     &                    CHF_CONST_INT[dir],
     &                    CHF_CONST_REAL[scale])

      REAL_T sumVal
      integer CHF_DDECL[i;j;k]
      integer CHF_DDECL[ii;jj;kk]
      integer n

      CHF_DTERM[
      ii = CHF_ID(0,dir);
      jj = CHF_ID(1,dir);
      kk = CHF_ID(2,dir)]

      do n = 0, CHF_NCOMP[lhs]-1
        CHF_MULTIDO[box;i;j;k]
          sumVal = bCoefs(CHF_IX[i+ii;j+jj;k+kk],n)
     &           + bCoefs(CHF_IX[i   ;j   ;k   ],n)

          lhs(CHF_IX[i;j;k],n) = lhs(CHF_IX[i;j;k],n) + scale * beta * sumVal
        CHF_ENDDO
      enddo

      return
      end
