#include "CONSTANTS.H"


c ----------------------------------------------------
c  compute undivided difference of phi
c ----------------------------------------------------
      subroutine UNDIVIDEDGRAD(CHF_FRA[dq],
     &                         CHF_CONST_FRA[q],
     &                         CHF_BOX[dInterior],
     &                         CHF_BOX[loedge],
     &                         CHF_BOX[hiedge],
     &                         CHF_CONST_INT[idir],
     &                         CHF_CONST_INT[haslo],
     &                         CHF_CONST_INT[hashi])

      integer ldir, CHF_DDECL[i;j;k]
      integer CHF_DDECL[ioff;joff;koff]
      integer n, ncomp

      ncomp = CHF_NCOMP[q]

      CHF_DTERM[
      ioff = CHF_ID(0,idir);
      joff = CHF_ID(1,idir);
      koff = CHF_ID(2,idir)]
      
      
c     Perform first difference calculation in the interior.

      CHF_MULTIDO[dInterior;i;j;k]

c     Find maximum gradient -- refine where max>cutoff      
      dq(CHF_IX[i;j;k],0) = 0
      do n = 0, ncomp-1
       dq(CHF_IX[i;j;k],0) = max( abs(dq(CHF_IX[i;j;k],0)), 
     &       0.5*abs( q(CHF_IX[i+ioff;j+joff;k+koff],n)
     &         - q(CHF_IX[i-ioff;j-joff;k-koff],n) ))
      enddo

      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     sweep direction, if required.

      if (haslo .eq. 1) then

         CHF_MULTIDO[loedge;i;j;k]

         dq(CHF_IX[i;j;k],0)=0
         do n = 0, ncomp-1
           dq(CHF_IX[i;j;k],0) = max( abs(dq(CHF_IX[i;j;k],0)),
     &        abs( q(CHF_IX[i+ioff;j+joff;k+koff], n) - q(CHF_IX[i;j;k], n)))
         enddo

         CHF_ENDDO
      endif

      if (hashi .eq. 1) then
         CHF_MULTIDO[hiedge;i;j;k]

         dq(CHF_IX[i;j;k],0)=0
         do n = 0, ncomp-1
           dq(CHF_IX[i;j;k],0) = max( abs(dq(CHF_IX[i;j;k],0)), 
     &          abs(q(CHF_IX[i;j;k], n) -
     &          q(CHF_IX[i-ioff;j-joff;k-koff], n)))
         enddo
         CHF_ENDDO

      endif
      return
      end      
      
      subroutine SETZEROVELOCITY(
     &     CHF_FRA[vel],
     &     CHF_CONST_FRA[porosity],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[porosityLimit])
     
      integer n, ncomp
      integer CHF_DDECL[i;j;k]
      
      
      ncomp = CHF_NCOMP[vel]
      
      
      CHF_MULTIDO[region; i; j; k]
        do n = 0, ncomp-1
          if (porosity(CHF_IX[i;j;k],0) .le. porosityLimit) then
            vel(CHF_IX[i;j;k],n) = 0
          endif
        enddo
     
      CHF_ENDDO
     
      return
      end
      

c   Enforce a minimum and maximum value cap on phi      
      subroutine SETMINMAXVAL(
     &     CHF_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[minVal],
     &     CHF_CONST_REAL[maxVal],
     &     CHF_CONST_INT[comp])
     
      integer n, ncomp
      integer CHF_DDECL[i;j;k]
      
      ncomp = CHF_NCOMP[phi]
      
      CHF_MULTIDO[region; i; j; k]
C        do n = 0, ncomp-1
          if (phi(CHF_IX[i;j;k],comp) .le. minVal) then
            phi(CHF_IX[i;j;k],comp) = minVal
          else if (phi(CHF_IX[i;j;k],comp) .gt. maxVal) then
          	phi(CHF_IX[i;j;k],comp) = maxVal
          endif
C        enddo
     
      CHF_ENDDO
     
      return
      end
      
c   Enforce a minimum value cap on phi      
      subroutine SETMINVAL(
     &     CHF_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[minVal],
     &     CHF_CONST_INT[comp])
     
      integer n, ncomp
      integer CHF_DDECL[i;j;k]
      
      ncomp = CHF_NCOMP[phi]
      
      CHF_MULTIDO[region; i; j; k]
C        do n = 0, ncomp-1
          if (phi(CHF_IX[i;j;k],comp) .le. minVal) then
            phi(CHF_IX[i;j;k],comp) = minVal
          endif
C        enddo
     
      CHF_ENDDO
     
      return
      end
      